# Cryptobot Application Launch Instructions

## System Requirements
- Linux operating system
- Python 3.12 or higher
- Node.js 18+ for frontend development
- SQLite database
- TensorFlow with XLA support

## Application Components
1. Frontend (React/TypeScript)
2. Backend (Python API)
3. Trading Bot
4. Machine Learning Models

## Starting the Application

### Using the Startup Script
The recommended way to start the application is using the `startup.sh` script:

```bash
./bot/startup.sh
```

This script handles the complete startup process:

1. **Resource Management**
   - Starts the resource manager service
   - Limits CPU/memory usage to 70%
   - Prevents system overload during heavy trading

2. **Process Management**
   - Checks for and cleanly stops any existing processes
   - Manages ports 5001 (backend) and 5173-5179 (frontend)
   - Creates necessary config directories

3. **Backend Service**
   - Activates Python virtual environment
   - Sets correct PYTHONPATH
   - Starts backend on port 8000
   - Verifies API responsiveness with health checks
   - Auto-retries up to 10 times if startup fails

4. **Frontend Service**
   - Verifies Vite configuration
   - Configures API proxy settings
   - Starts development server
   - Finds available port (5173-5179)
   - Monitors startup progress

5. **Automatic Cleanup**
   - Creates a companion `shutdown.sh` script
   - Registers process IDs for clean shutdown
   - Enables proper resource cleanup

### Accessing the Application
After successful startup, you can access:
- Frontend UI: http://localhost:5173
- Backend API: http://localhost:5001/trading

### Monitoring & Troubleshooting
```bash
# View backend logs
tail -n 30 /opt/lampp/htdocs/bot/backend.log

# View frontend logs
tail -n 30 /opt/lampp/htdocs/bot/frontend.log

# Check backend health
curl http://localhost:5001/trading/status

# Stop all services
/opt/lampp/htdocs/bot/shutdown.sh
```

## Service Management

### Auto-Restart Mechanism
- Services are configured to auto-restart with exponential backoff
- Check logs for restart attempts:
```bash
sudo journalctl -u cryptobot-backend -f
```

### Manual Restart
```bash
# Stop services
sudo systemctl stop cryptobot-backend
sudo systemctl stop cryptobot-frontend

# Start services
sudo systemctl start cryptobot-backend
sudo systemctl start cryptobot-frontend
```

## Troubleshooting Guide

### Backend Issues
1. Check logs:
```bash
sudo tail -f /var/log/cryptobot/backend.log
```

2. Common errors:
- Port conflicts (default: 8000)
- Environment variable loading
- Database connection issues
- ML model loading problems

### Frontend Issues
1. Check logs:
```bash
sudo tail -f /var/log/cryptobot/frontend.log
```

2. Common issues:
- WebSocket connection failures
- API endpoint connectivity
- UI rendering problems

### ML/Deep Learning Issues
1. Verify TensorFlow installation:
```bash
python -c "import tensorflow as tf; print(tf.__version__)"
```

2. Check GPU/CPU availability:
```bash
python -c "import tensorflow as tf; print('GPUs:', tf.config.list_physical_devices('GPU'))"
```

### Network Issues
1. Check API connectivity:
```bash
ping -c 4 coingecko.com
```

2. Verify WebSocket connections:
```bash
sudo netstat -tulpn | grep 8000
```

## Data Visualization

The application uses Recharts for data visualization, displaying:
- Real-time cryptocurrency prices
- Market capitalization
- Trading volume
- Risk score analysis
- Custom watch rules

### Chart Features
- Monotone interpolation for smooth price curves
- Custom tooltips with detailed data points
- Multiple data series support
- Responsive design

## System Integration

### Service Status
```bash
# Check all Cryptobot services
sudo systemctl list-units --type=service | grep cryptobot

# Check specific service status
sudo systemctl status cryptobot-backend
```

### Log Management
```bash
# View all logs
sudo journalctl -u cryptobot-*

# View specific logs
sudo journalctl -u cryptobot-backend -f
```

## Environment Configuration

### Environment Variables
1. Backend:
- API keys
- Database connections
- ML model paths
- Service ports

2. Frontend:
- API endpoints
- WebSocket URLs
- Feature flags

### Configuration Files
- Backend: `/backend/config.py`
- Frontend: `/src/config.ts`
- ML: `/bot/ml_config.py`

## Security Notes
- All services run with appropriate permissions
- API keys should be stored in environment variables
- Database connections are encrypted
- WebSocket communications are secured

## Support
For any issues not covered in this guide:
1. Check the logs first
2. Verify system requirements
3. Check network connectivity
4. Contact me with error messages and logs
